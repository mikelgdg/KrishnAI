import streamlit as st
import google.generativeai as genai
import json
import os
import random
from rotacion_claves import get_api_rotator

# Configuraci√≥n de p√°gina mejorada
st.set_page_config(
    page_title="Krishna AI - Bhagavad Gita",
    page_icon=".streamlit/krishna.png",
    layout="centered",
    initial_sidebar_state="expanded"
)

# Cargar CSS personalizado
def load_css():
    """Carga el CSS personalizado"""
    css_file = ".streamlit/_style.css"
    if os.path.exists(css_file):
        with open(css_file) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

load_css()

# Obtener el rotador de claves API
api_rotator = get_api_rotator()

# --- Funciones de carga y procesamiento del Bhagavad Gita ---
def cargar_bhagavad_gita(path="bhagavad_gita.json"):
    """Carga el Bhagavad Gita desde el archivo JSON estructurado."""
    # Prioridad: TXT CORREGIDO > TXT > Mejorado > EPUB > Original
    paths_prioritarios = [
        "bhagavad_gita_txt_corregido.json",
        "bhagavad_gita_txt.json",
        "bhagavad_gita_mejorado.json",
        "bhagavad_gita_epub.json", 
        "bhagavad_gita.json"
    ]
    
    archivo_usado = None
    for p in paths_prioritarios:
        if os.path.exists(p):
            archivo_usado = p
            break
    
    # Si no existe ning√∫n JSON, intentar procesar el TXT autom√°ticamente
    if not archivo_usado and os.path.exists("Bhagavad-Gita-Anonimo.txt"):
        st.info("üîÑ Procesando el Bhagavad Gita por primera vez...")
        try:
            # Importar y ejecutar el procesador
            from procesado_bhagavad_gita_txt_corregido import procesar_bhagavad_gita_txt
            
            # Ejecutar el procesamiento
            resultado = procesar_bhagavad_gita_txt("Bhagavad-Gita-Anonimo.txt", "bhagavad_gita_txt_corregido.json")
            
            # Verificar si se cre√≥ el archivo
            if resultado and os.path.exists("bhagavad_gita_txt_corregido.json"):
                archivo_usado = "bhagavad_gita_txt_corregido.json"
                st.success("‚úÖ Bhagavad Gita procesado correctamente")
                st.rerun()  # Reiniciar la app para cargar el archivo
            else:
                st.error("‚ùå No se pudo crear el archivo JSON del Bhagavad Gita")
        except Exception as e:
            st.error(f"‚ùå Error procesando el Bhagavad Gita: {e}")
            st.error("Por favor, contacta al administrador o intenta m√°s tarde.")
    
    if not archivo_usado:
        st.error("‚ùå Error: No se encontr√≥ ning√∫n archivo del Bhagavad Gita y no se pudo procesar autom√°ticamente.")
        st.stop()
    

    try:
        with open(archivo_usado, "r", encoding="utf-8") as f:
            bhagavad_gita = json.load(f)
        return bhagavad_gita
    except json.JSONDecodeError as e:
        st.error(f"Error al decodificar JSON en {archivo_usado}: {e}")
        st.stop()

def obtener_versos_contexto(bhagavad_gita, max_tokens=80000, versos_citados_previos=None):
    """Obtiene versos del Bhagavad Gita optimizados para el contexto de Krishna, evitando repeticiones."""
    if versos_citados_previos is None:
        versos_citados_previos = set()
    
    versos_seleccionados = []
    tokens_actuales = 0
    
    # DIAGN√ìSTICO: Mostrar qu√© cap√≠tulos hay disponibles
    capitulos_disponibles = list(bhagavad_gita['capitulos'].keys())
    print(f"üîç DEBUG: Cap√≠tulos disponibles en JSON: {sorted(capitulos_disponibles, key=int)}")
    
    # Verificar distribuci√≥n de versos por cap√≠tulo
    for cap_num in sorted(capitulos_disponibles, key=int):
        capitulo = bhagavad_gita['capitulos'][cap_num]
        versos_krishna = sum(1 for v in capitulo['versos'].values() 
                           if 'El Bienaventurado Se√±or' in v.get('locutor', ''))
        total_versos = len(capitulo['versos'])
        print(f"   üìñ Cap {cap_num}: {total_versos} versos ({versos_krishna} de Krishna)")
    
    # Procesar todos los cap√≠tulos de forma equitativa
    for cap_num in sorted(capitulos_disponibles, key=int):
        if cap_num in bhagavad_gita['capitulos']:
            capitulo = bhagavad_gita['capitulos'][cap_num]
            versos_cap = 0
            
            for verso_num, verso in capitulo['versos'].items():
                # Priorizar versos de Krishna ("El Bienaventurado Se√±or")
                locutor = verso.get('locutor', '')
                es_krishna = 'El Bienaventurado Se√±or' in locutor
                
                # FILTRO ANTI-REPETICI√ìN CR√çTICO: Eliminar completamente versos ya citados
                verso_key = f"{cap_num}:{verso_num}"
                if verso_key in versos_citados_previos:
                    print(f"üö´ ELIMINADO DEL CONTEXTO: {verso_key} (ya citado previamente)")
                    continue  # ELIMINADO: No incluir este verso en el contexto
                
                if es_krishna:  # Solo procesar versos de Krishna
                    verso_texto = f"Cap√≠tulo {cap_num}, Verso {verso_num}"
                    if locutor:
                        verso_texto += f" ({locutor})"
                    
                    # Verificar si hay texto del verso
                    if 'texto' in verso and verso['texto']:
                        verso_texto += f": {verso['texto']}"
                    
                    if 'significado' in verso and verso['significado']:
                        verso_texto += f" SIGNIFICADO: {verso['significado']}"
                    
                    verso_tokens = len(verso_texto) // 4  # Aproximaci√≥n
                    
                    if tokens_actuales + verso_tokens < max_tokens:
                        versos_seleccionados.append({
                            'capitulo': int(cap_num),
                            'verso': int(verso_num),
                            'texto_completo': verso_texto,
                            'locutor': locutor,
                            'es_krishna': es_krishna
                        })
                        tokens_actuales += verso_tokens
                        versos_cap += 1
                    else:
                        print(f"‚ö†Ô∏è  DEBUG: L√≠mite de tokens alcanzado en Cap {cap_num}, Verso {verso_num}")
                        break
            
            print(f"   ‚úÖ Cap {cap_num}: {versos_cap} versos de Krishna a√±adidos")
            
            if tokens_actuales >= max_tokens * 0.9:  # 90% del l√≠mite
                print(f"üõë DEBUG: L√≠mite de tokens (90%) alcanzado. Parando en cap√≠tulo {cap_num}")
                break
    
    # Ordenar para poner primero los versos de Krishna
    versos_seleccionados.sort(key=lambda x: (not x['es_krishna'], x['capitulo'], x['verso']))
    
    # DIAGN√ìSTICO FINAL
    total_versos = len(versos_seleccionados)
    versos_por_capitulo = {}
    for v in versos_seleccionados:
        cap = v['capitulo']
        versos_por_capitulo[cap] = versos_por_capitulo.get(cap, 0) + 1
    
    print(f"\nüìä RESUMEN FINAL:")
    print(f"   üé≠ Total versos seleccionados: {total_versos}")
    print(f"   üî• Tokens estimados: {tokens_actuales}")
    print(f"   üìã Distribuci√≥n: {dict(sorted(versos_por_capitulo.items()))}")
    print(f"   üö´ Versos eliminados por repetici√≥n: {len(versos_citados_previos)}")
    if versos_citados_previos:
        print(f"   üìù Lista de versos eliminados: {sorted(list(versos_citados_previos))}")
    
    return versos_seleccionados

def extraer_versos_citados_del_historial(historial_messages, bhagavad_gita, ventana_prohibicion=6):
    """
    Extrae los versos citados del historial de conversaci√≥n para evitar repeticiones.
    Ahora devuelve tanto las referencias como el texto completo de los versos.
    
    Args:
        historial_messages: Lista de mensajes del historial
        bhagavad_gita: JSON con el contenido del Bhagavad Gita
        ventana_prohibicion: N√∫mero de mensajes hacia atr√°s donde se proh√≠ben repeticiones
    """
    import re
    versos_citados = set()  # Referencias como "6:31"
    textos_prohibidos = []  # Textos completos de los versos
    
    # Funci√≥n auxiliar para convertir n√∫meros romanos a ar√°bigos
    def roman_to_int(roman):
        # Diccionario expandido para todos los posibles n√∫meros romanos del Bhagavad Gita
        roman_numerals = {
            'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5, 'VI': 6, 'VII': 7, 'VIII': 8, 'IX': 9, 'X': 10,
            'XI': 11, 'XII': 12, 'XIII': 13, 'XIV': 14, 'XV': 15, 'XVI': 16, 'XVII': 17, 'XVIII': 18
        }
        resultado = roman_numerals.get(roman, None)
        if resultado is None:
            print(f"‚ö†Ô∏è  WARNING: N√∫mero romano no reconocido: {roman}")
            return roman  # Devolver el original si no se reconoce
        return str(resultado)
    
    # Funci√≥n para extraer texto del verso del Bhagavad Gita
    def obtener_texto_verso(capitulo, verso):
        try:
            cap_str = str(capitulo)
            verso_str = str(verso)
            if cap_str in bhagavad_gita['capitulos'] and verso_str in bhagavad_gita['capitulos'][cap_str]['versos']:
                verso_data = bhagavad_gita['capitulos'][cap_str]['versos'][verso_str]
                texto = verso_data.get('texto', '')
                if texto:
                    # Limpiar el texto para comparaci√≥n (eliminar espacios extra, etc.)
                    return texto.strip()
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è  ERROR al extraer texto del verso {capitulo}:{verso}: {e}")
            return None
    
    # Solo considerar los √∫ltimos mensajes seg√∫n la ventana de prohibici√≥n
    mensajes_recientes = historial_messages[-ventana_prohibicion:] if len(historial_messages) > ventana_prohibicion else historial_messages
    print(f"üîç DEBUG: Analizando √∫ltimos {len(mensajes_recientes)} mensajes para evitar repeticiones")
    
    for i, message in enumerate(mensajes_recientes):
        if message["role"] == "assistant":  # Solo respuestas de Krishna
            contenido = message["content"]
            # Buscar patrones como [C. XII - 45] (n√∫meros romanos) - patr√≥n mejorado
            pattern_roman = r"\[C\.\s*([IVXLC]+)\s*-\s*(\d+)\]"
            matches_roman = re.findall(pattern_roman, contenido)
            
            for capitulo_roman, verso in matches_roman:
                capitulo_arabigo = roman_to_int(capitulo_roman)
                verso_key = f"{capitulo_arabigo}:{verso}"
                versos_citados.add(verso_key)
                
                # NUEVO: Extraer el texto completo del verso
                texto_verso = obtener_texto_verso(capitulo_arabigo, verso)
                if texto_verso:
                    textos_prohibidos.append(texto_verso)
                    print(f"üîç DEBUG: Detectado verso romano [C. {capitulo_roman} - {verso}] ‚Üí {verso_key}")
                    print(f"üìù DEBUG: Texto prohibido extra√≠do: {texto_verso[:100]}..." if len(texto_verso) > 100 else f"üìù DEBUG: Texto prohibido: {texto_verso}")
                
            # Tambi√©n buscar el formato anterior por compatibilidad [C. X - Y]
            pattern_arabigo = r"\[C\.\s*(\d+)\s*-\s*(\d+)\]"
            matches_arabigo = re.findall(pattern_arabigo, contenido)
            
            for capitulo, verso in matches_arabigo:
                verso_key = f"{capitulo}:{verso}"
                versos_citados.add(verso_key)
                
                # NUEVO: Extraer el texto completo del verso
                texto_verso = obtener_texto_verso(capitulo, verso)
                if texto_verso:
                    textos_prohibidos.append(texto_verso)
                    print(f"üîç DEBUG: Detectado verso ar√°bigo [C. {capitulo} - {verso}] ‚Üí {verso_key}")
                    print(f"üìù DEBUG: Texto prohibido extra√≠do: {texto_verso[:100]}..." if len(texto_verso) > 100 else f"üìù DEBUG: Texto prohibido: {texto_verso}")
    
    print(f"üìä DEBUG: Total versos citados en ventana de {ventana_prohibicion}: {len(versos_citados)}")
    print(f"üìù DEBUG: Total textos prohibidos extra√≠dos: {len(textos_prohibidos)}")
    if versos_citados:
        print(f"üìã DEBUG: Lista referencias: {sorted(list(versos_citados))}")
    
    return versos_citados, textos_prohibidos

def obtener_tratamiento_genero(nombre_usuario, genero=None):
    """
    Determina el tratamiento correcto seg√∫n el g√©nero.
    
    Args:
        nombre_usuario: Nombre del usuario
        genero: "Masculino" o "Femenino" (del selectbox)
    
    Returns:
        dict con las formas correctas: querido/querida, estimado/estimada, etc.
    """
    # Si se especifica el g√©nero expl√≠citamente, usarlo
    if genero == "Femenino":
        return {
            "querido": "querida",
            "estimado": "estimada", 
            "hijo": "hija",
            "devoto": "devota"
        }
    elif genero == "Masculino":
        return {
            "querido": "querido",
            "estimado": "estimado",
            "hijo": "hijo", 
            "devoto": "devoto"
        }
    else:
        # Fallback: detectar por nombre com√∫n (b√°sico)
        nombres_femeninos = [
            "maria", "ana", "carmen", "isabel", "pilar", "dolores", "teresa", "rosa", "francisca", 
            "antonia", "mercedes", "elena", "laura", "cristina", "marta", "patricia", "sandra",
            "lucia", "monica", "silvia", "beatriz", "julia", "irene", "raquel", "sara", "sofia",
            "andrea", "claudia", "daniela", "paola", "alejandra", "gabriela", "natalia", "carolina"
        ]
        
        nombre_lower = nombre_usuario.lower().strip()
        
        # Detectar nombres que terminan t√≠picamente en femenino
        if (nombre_lower in nombres_femeninos or 
            nombre_lower.endswith('a') and not nombre_lower.endswith('ma') and len(nombre_lower) > 3):
            return {
                "querido": "querida",
                "estimado": "estimada",
                "hijo": "hija", 
                "devoto": "devota"
            }
        else:
            return {
                "querido": "querido", 
                "estimado": "estimado",
                "hijo": "hijo",
                "devoto": "devoto"
            }

def construir_prompt_krishna(pregunta_arjuna, versos_contexto, bhagavad_gita, historial_chat=None, nombre_usuario="Arjuna", genero_usuario=None):
    """Construye el prompt para que Krishna responda como en el Bhagavad Gita."""
    
    # Obtener el tratamiento de g√©nero correcto
    tratamiento = obtener_tratamiento_genero(nombre_usuario, genero_usuario)
    querido_a = tratamiento["querido"]
    
    # Separar versos por locutor para mejor contexto
    versos_krishna = []
    versos_arjuna = []
    versos_otros = []
    
    for verso in versos_contexto:
        locutor = verso.get('locutor', '')
        if 'bienaventurado' in locutor.lower() or 'se√±or' in locutor.lower():
            versos_krishna.append(verso['texto_completo'])
        elif 'arjuna' in locutor.lower():
            versos_arjuna.append(verso['texto_completo'])
        else:
            versos_otros.append(verso['texto_completo'])
    
    # Construir contexto organizado por locutor
    contexto_organizado = ""
    
    if versos_krishna:
        contexto_organizado += "=== ENSE√ëANZAS DE KRISHNA ===\n"
        # CAMBIO CR√çTICO: Usar TODOS los versos de Krishna, no solo 15
        contexto_organizado += "\n\n".join(versos_krishna)  # SIN L√çMITE [:15]
        contexto_organizado += "\n\n"
        print(f"üïâÔ∏è  DEBUG: Incluidos {len(versos_krishna)} versos de Krishna en el contexto")
    
    if versos_arjuna:
        contexto_organizado += "=== PREGUNTAS Y DUDAS DE ARJUNA ===\n"
        contexto_organizado += "\n\n".join(versos_arjuna[:5])  # Menor cantidad
        contexto_organizado += "\n\n"
        print(f"üèπ DEBUG: Incluidos {min(len(versos_arjuna), 5)} versos de Arjuna")
    
    if versos_otros:
        contexto_organizado += "=== CONTEXTO NARRATIVO ===\n"
        contexto_organizado += "\n\n".join(versos_otros[:3])
        print(f"üìú DEBUG: Incluidos {min(len(versos_otros), 3)} versos narrativos")
    
    # Construir historial de conversaci√≥n previa
    historial_conversacion = ""
    if historial_chat and len(historial_chat) > 0:
        historial_conversacion = "\n=== CONVERSACI√ìN PREVIA ===\n"
        # Tomar los √∫ltimos 6 mensajes (3 intercambios) para no sobrecargar el contexto
        mensajes_recientes = historial_chat[-6:]
        for i, mensaje in enumerate(mensajes_recientes):
            if mensaje["role"] == "user":
                historial_conversacion += f"{nombre_usuario.upper()}: {mensaje['content']}\n"
            else:
                historial_conversacion += f"KRISHNA: {mensaje['content']}\n"
        historial_conversacion += "=== FIN DE CONVERSACI√ìN PREVIA ===\n\n"
    
    # NUEVA SECCI√ìN: Construir lista expl√≠cita de versos PROHIBIDOS
    versos_prohibidos_info = ""
    if historial_chat and len(historial_chat) > 0:
        versos_citados_en_conversacion, textos_prohibidos_completos = extraer_versos_citados_del_historial(historial_chat, bhagavad_gita, ventana_prohibicion=8)
        if versos_citados_en_conversacion:
            # Convertir formato interno (6:31) a formato de cita ([C. VI - 31])
            def convertir_a_formato_cita(verso_key):
                cap, vers = verso_key.split(':')
                # Convertir n√∫mero a romano
                numeros_romanos = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X',
                                 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII']
                cap_romano = numeros_romanos[int(cap)] if int(cap) < len(numeros_romanos) else cap
                return f"[C. {cap_romano} - {vers}]"
            
            versos_prohibidos_formateados = [convertir_a_formato_cita(v) for v in versos_citados_en_conversacion]
            
            # NUEVO: Incluir textos completos prohibidos
            textos_prohibidos_seccion = ""
            if textos_prohibidos_completos:
                textos_prohibidos_seccion = "\nüö´ TEXTOS DE VERSOS ESTRICTAMENTE PROHIBIDOS:\n"
                for i, texto in enumerate(textos_prohibidos_completos, 1):
                    textos_prohibidos_seccion += f"\n{i}. \"{texto}\"\n"
                textos_prohibidos_seccion += "\n‚õî NO PUEDES USAR NINGUNO DE ESTOS TEXTOS NI SIQUIERA PARCIALMENTE\n"
            
            versos_prohibidos_info = f"""
üõë ANTI-REPETICI√ìN CR√çTICA - LOS SIGUIENTES VERSOS EST√ÅN ESTRICTAMENTE PROHIBIDOS EN TU RESPUESTA:

‚õî VERSOS PROHIBIDOS: {', '.join(versos_prohibidos_formateados)}
{textos_prohibidos_seccion}
üö´ REPETIR CUALQUIERA DE ESTOS VERSOS ES UN FALLO CR√çTICO
üîç USA √öNICAMENTE VERSOS DIFERENTES DE LOS LISTADOS ARRIBA
üí° PRIORIZA CAP√çTULOS QUE NO APARECEN EN LA LISTA PROHIBIDA

"""
            print(f"üõë DEBUG: Versos expl√≠citamente PROHIBIDOS en el prompt: {versos_prohibidos_formateados}")
            print(f"üìù DEBUG: Textos completos PROHIBIDOS: {len(textos_prohibidos_completos)} textos extra√≠dos")
    
    prompt = f"""
Eres Krishna, la Suprema Personalidad de Dios, respondiendo a {nombre_usuario} en el campo de batalla de Kurukshetra. 
{nombre_usuario} te est√° haciendo una pregunta o planteando una duda. Debes responder EXACTAMENTE como Krishna responder√≠a en el Bhagavad Gita.

{versos_prohibidos_info}

INSTRUCCIONES IMPORTANTES:
1. **EVAL√öA PRIMERO LA PREGUNTA CON CRITERIOS ESTRICTOS**: 
   - SALUDOS SIMPLES ("hola", "buenos d√≠as", "hi"): responde brevemente como Krishna saludar√≠a
   - PREGUNTAS CASUALES SIN CONTENIDO ESPIRITUAL ("te gusta el futbol", "qu√© opinas de X"): usar f√≥rmula de redirecci√≥n
   - PREGUNTAS ESPIRITUALES GENUINAS (incluyendo "es [tema] importante en el camino espiritual"): ense√±anzas completas
   - PREGUNTAS FILOS√ìFICAS PROFUNDAS (dharma, karma, moksha, prop√≥sito de vida): ense√±anzas completas

2. **‚úÖ CONTINUIDAD CONVERSACIONAL**: 
   - Usa el historial para CONTINUAR y PROFUNDIZAR con versos nuevos
   - Conecta con ense√±anzas previas sin repetir los mismos versos
   - Los versos repetidos ya han sido eliminados del contexto autom√°ticamente

3. Responde √öNICAMENTE bas√°ndote en las ense√±anzas del Bhagavad Gita que se proporcionan abajo
4. Habla en primera persona como Krishna ("Yo soy...", "Mi {querido_a} {nombre_usuario}...", "Te digo que...")
5. Usa un tono divino, sabio y compasivo, pero directo
6. NO inventes ense√±anzas - usa solo lo que est√° en los versos proporcionados
7. ESTRUCTURA tu respuesta como un discurso cohesivo:
   - Para preguntas profundas: desarrolla las ense√±anzas con transiciones fluidas entre ideas
   - Para saludos/preguntas simples: mant√©n brevedad y dignidad
8. **‚ö†Ô∏è PROHIBIDO ABSOLUTAMENTE USAR ESTAS TRANSICIONES**: "Adem√°s", "Por tanto", "Comprende tambi√©n", "Sin embargo", "Tambi√©n", "Asimismo", "Es m√°s", "Ahora bien", "Adem√°s", "Por otra parte"
9. **‚úÖ USA EXCLUSIVAMENTE TRANSICIONES DEL BHAGAVAD GITA**: "Te digo que", "Sabe que", "Escucha", "Mi {querido_a} [nombre]", "Quien", "Aquel que", "Por ello"
10. **MANT√âN REGISTRO AUT√âNTICO DEL BHAGAVAD GITA**: 
    - PROHIBIDO usar lenguaje psicol√≥gico moderno ("experiencia", "proceso", "realizar")
    - PROHIBIDO conceptos new age ("energ√≠a", "vibraci√≥n", "despertar de conciencia")
    - PROHIBIDO expresiones contempor√°neas ("en cada instante", "perseverar", "la unidad entre nosotros")
    - USA SOLO vocabulario y conceptos del texto original del Gita
11. **FINALIZA SIEMPRE CON VERSOS**: Tu respuesta debe terminar con un verso completo del Bhagavad Gita, NUNCA con explicaciones modernas
12. Al final de tu respuesta, SIEMPRE cita las referencias exactas de donde proviene tu ense√±anza (solo si usas versos)
13. Mant√©n el estilo y las expresiones t√≠picas del Bhagavad Gita
14. Usa SOLO las palabras de Krishna (El Bienaventurado Se√±or), NO las de Arjuna ni otros
15. **CONTINUIDAD OBLIGATORIA**: Si hay conversaci√≥n previa, SIEMPRE tenla en cuenta para dar continuidad y profundizar en temas ya tratados
16. Dir√≠gete a {nombre_usuario} por su nombre, pero mant√©n el respeto y la solemnidad apropiada

--- CONTEXTO DEL BHAGAVAD GITA ---
{contexto_organizado}
--- FIN DEL CONTEXTO ---

{historial_conversacion}--- PREGUNTA ACTUAL DE {nombre_usuario.upper()} ---
{pregunta_arjuna}
--- FIN DE LA PREGUNTA ---

Responde como Krishna, usando √öNICAMENTE las ense√±anzas de los versos anteriores que fueron pronunciadas por Krishna (El Bienaventurado Se√±or). Tu respuesta debe ser fiel al contenido y estilo del Bhagavad Gita.

ESTRUCTURA DE RESPUESTA SEG√öN TIPO DE PREGUNTA:

**PARA SALUDOS SIMPLES** ("hola", "buenos d√≠as", "hi"):
"Hola {nombre_usuario}"

**PARA PREGUNTAS SUPERFICIALES** (no espirituales):
"¬øAs√≠ te diriges a m√≠, {nombre_usuario}?"
y si lo ha hecho m√°s de una vez:
"Insisto, ¬øas√≠ te diriges a m√≠?"

**PARA PREGUNTAS PROFUNDAS** (dharma, karma, moksha, filosof√≠a):
1. **DESARROLLO**: Presenta las ense√±anzas conectadas del Bhagavad Gita
2. **INTEGRACI√ìN**: Vincula conceptos relacionados en una progresi√≥n l√≥gica  
3. **CIERRE CON VERSO**: SIEMPRE termina con un verso completo del Bhagavad Gita, NUNCA con interpretaciones modernas
4. **REFERENCIAS**: Integra referencias despu√©s de cada ense√±anza

**CONTINUIDAD CONVERSACIONAL**:
- SI ya se mencion√≥ un tema (ej: yoga), profundiza con NUEVOS versos complementarios
- NO repitas versos ya citados
- Conecta la nueva pregunta con ense√±anzas previas usando frases como: "Como te expliqu√© anteriormente sobre [tema]..."
- TERMINA SIEMPRE con las palabras exactas de Krishna del Bhagavad Gita, NO con explicaciones propias

Si hay conversaci√≥n previa, tenla en cuenta para dar continuidad y profundizar en temas ya tratados, pero evitando repetir versos anteriores.

FORMATO DE REFERENCIAS OBLIGATORIO - MUY IMPORTANTE:
- ‚ö†Ô∏è USA SIEMPRE N√öMEROS ROMANOS: "[C. IV - XXXIX]", "[C. VI - XXX]", "[C. XVIII - LXVI]"
- ‚ùå NUNCA uses n√∫meros ar√°bigos: ESTRICTAMENTE PROHIBIDO "[C. 4 - 39]", "[C. 6 - 30]"
- EJEMPLOS CORRECTOS: [C. II - 47], [C. III - 8], [C. IV - 42], [C. VI - 35] (capitulos en n√∫meros romanos, versos en ar√°bigos)
- Integra cada referencia INMEDIATAMENTE despu√©s de cada ense√±anza
- NO repitas las referencias al final
- Cada cita debe tener su referencia espec√≠fica integrada en el texto
- Mant√©n el flujo natural del discurso

‚ö†Ô∏è RECORDATORIO CR√çTICO SOBRE TRANSICIONES:
JAM√ÅS uses: "Adem√°s", "Por tanto", "Tambi√©n", "Sin embargo", "Es m√°s", "Asimismo"
USA SOLO: "Te digo que", "Sabe que", "Escucha", "Mi {querido_a} [nombre]", "Quien", "Aquel que", "Por ello"
"""
    # DEBUG COMPLETO: Mostrar estad√≠sticas del prompt
    total_chars = len(prompt)
    lineas_prompt = prompt.count('\n')
    versos_en_contexto = len(versos_contexto)
    
    print("=" * 80)
    print("üïâÔ∏è  PROMPT KRISHNA - ESTAD√çSTICAS COMPLETAS")
    print("=" * 80)
    print(f"üìä Caracteres totales: {total_chars:,}")
    print(f"üìÑ L√≠neas: {lineas_prompt}")
    print(f"üìñ Versos en contexto: {versos_en_contexto}")
    
    if versos_prohibidos_info:
        print(f"üö´ Estado anti-repetici√≥n: ACTIVO")
        if "TEXTOS DE VERSOS ESTRICTAMENTE PROHIBIDOS" in versos_prohibidos_info:
            count_prohibidos = versos_prohibidos_info.count('". \n')
            print(f"üìù Textos completos prohibidos: {count_prohibidos}")
    else:
        print(f"üü¢ Estado anti-repetici√≥n: Primera respuesta - no hay versos previos")
    
    print("=" * 80)
    
    # Mostrar una porci√≥n del prompt para verificaci√≥n
    print("üìù PREVIEW DEL PROMPT (primeros 800 chars):")
    print("-" * 40)
    print(prompt[:800] + "..." if len(prompt) > 800 else prompt)
    print("-" * 40)
    
    return prompt

def calcular_max_tokens_respuesta():
    """Calcula los tokens m√°ximos para la respuesta de Krishna."""
    return 1200  # Aumentado para permitir respuestas m√°s completas sin cortes abruptos

# --- UI Principal ---
# Header con logo al estilo Gemini
col1, col2, col3 = st.columns([1, 1, 1])
with col2:
    st.image(".streamlit/krishna.png", use_container_width=False)
    
#col1, col2, col3 = st.columns([1, 2, 1])
#with col2:
    #st.image(".streamlit/UWU.png", use_container_width=False)

st.markdown('##')

# Inicializar el historial de chat si no existe
if "messages" not in st.session_state:
    st.session_state.messages = []

# ELIMINADO: session_state.versos_citados (ahora usamos solo ventana deslizante)

# Cargar el Bhagavad Gita
try:
    bhagavad_gita = cargar_bhagavad_gita()
except Exception:
    st.stop()

# Sidebar simplificada
with st.sidebar:
    # Logo centrado
    col1, col2, col3 = st.sidebar.columns([1, 2, 1])
    with col2:
        st.image(".streamlit/krishna.png", use_container_width=False)
    
    st.sidebar.markdown('###')

    # Configuraci√≥n Personal - Compacta
    st.markdown("### Tu Nombre")
    nombre_usuario = st.text_input(
        "",
        value="Mikel",
        help="Krishna se dirigir√° a ti por este nombre",
        label_visibility="collapsed"
    )
    
    # Selector de g√©nero para las expresiones
    st.markdown("### G√©nero")
    genero = st.selectbox(
        "",
        options=["Masculino", "Femenino"],
        index=0,
        help="Para que Krishna use 'querido/querida' correctamente",
        label_visibility="collapsed"
    )
    
    # Guardar el nombre y g√©nero en session_state
    if nombre_usuario:
        st.session_state.nombre_usuario = nombre_usuario
    else:
        st.session_state.nombre_usuario = "Mikel"
    
    st.session_state.genero_usuario = genero
    
    # Temperatura - Compacta
    st.markdown("### Creatividad")
    temperature = st.slider(
        "",
        min_value=0.0,
        max_value=0.8,
        value=0.1,
        step=0.05,
        help="Controla la creatividad. Valores bajos mantienen mayor fidelidad al texto original.",
        label_visibility="collapsed"
    )

    # Bot√≥n para limpiar historial - M√°s prominente
    #st.markdown("---")
    if st.button("üîÑ Nueva conversaci√≥n", help="Limpia el historial para empezar una nueva conversaci√≥n con Krishna", use_container_width=True):
        st.session_state.messages = []
        st.rerun()

    # Separador antes de la informaci√≥n
    st.markdown("#")
    st.markdown("#")
    st.markdown("#")
    st.markdown("#")
    st.markdown("#")
    st.markdown("#")
    st.markdown("#")
    
    # Informaci√≥n compacta en un solo expandible - al final
    with st.expander("‚ÑπÔ∏è Informaci√≥n", expanded=False):
        nombre_mostrar = st.session_state.get('nombre_usuario', 'Mikel')
        st.markdown(f"""
        **Krishna AI** te permite dialogar directamente con Krishna del Bhagavad Gita.
        
        Eres **{nombre_mostrar}** en Kurukshetra, y Krishna responder√° con las ense√±anzas exactas del Gita.
        
        **Uso:**
        - Haz preguntas profundas sobre dharma, karma, moksha
        - Krishna recuerda los √∫ltimos intercambios
        - Todas las respuestas incluyen referencias exactas
        
        **Datos del Gita:**
        - Cap√≠tulos: {len(bhagavad_gita['capitulos'])}
        - Versos: {sum(len(cap['versos']) for cap in bhagavad_gita['capitulos'].values())}
        - Traductor: {bhagavad_gita['traductor']}
        
        **API:** {api_rotator.get_status_summary()['available_keys']}/{api_rotator.get_status_summary()['total_keys']} claves disponibles
        """)

# Obtener contexto de versos relevantes, excluyendo versos ya citados
# CR√çTICO: Usar SOLO la ventana deslizante de 8 mensajes (no session_state acumulativo)
if st.session_state.messages:
    versos_previos, _ = extraer_versos_citados_del_historial(st.session_state.messages, bhagavad_gita, ventana_prohibicion=8)
    print(f"üîç DEBUG: Versos citados en ventana de 8: {len(versos_previos)}")
    print(f"üîç DEBUG: Lista versos_previos: {sorted(list(versos_previos))}")
    # CAMBIO CR√çTICO: Usar SOLO la ventana, NO el session_state acumulativo
    versos_a_bloquear = versos_previos
else:
    print("üîç DEBUG: No hay mensajes en el historial a√∫n")
    versos_a_bloquear = set()

versos_contexto = obtener_versos_contexto(bhagavad_gita, versos_citados_previos=versos_a_bloquear)
print(f"üîç DEBUG: Versos contexto generados: {len(versos_contexto)}")

# DEBUG CR√çTICO: Verificar si versos bloqueados aparecen en el contexto
versos_bloqueados_encontrados = []
for verso in versos_contexto:
    verso_key = f"{verso['capitulo']}:{verso['verso']}"
    if verso_key in versos_a_bloquear:
        versos_bloqueados_encontrados.append(verso_key)

if versos_bloqueados_encontrados:
    print(f"üö® ERROR CR√çTICO: Versos bloqueados aparecen en contexto: {versos_bloqueados_encontrados}")
else:
    print("‚úÖ DEBUG: Ning√∫n verso bloqueado aparece en el contexto (correcto)")

# Mostrar mensajes previos del chat
for message in st.session_state.messages:
    if message["role"] == "assistant":
        with st.chat_message(message["role"], avatar=".streamlit/krishna.png"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"], avatar=".streamlit/arjuna.png"):
            st.markdown(message["content"])

# Entrada del chat
nombre_usuario_actual = st.session_state.get('nombre_usuario', 'Mikel')
placeholder_text = f"Hola {nombre_usuario_actual}..."

if prompt := st.chat_input(placeholder_text):
    # A√±adir pregunta del usuario (Arjuna) al historial
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user", avatar=".streamlit/arjuna.png"):
        st.markdown(prompt)

    # Generar respuesta de Krishna
    with st.chat_message("assistant", avatar=".streamlit/krishna.png"):
        message_placeholder = st.empty()
        full_response = ""
        
        try:
            # Obtener el nombre y g√©nero del usuario del session_state
            nombre_usuario = st.session_state.get('nombre_usuario', 'Mikel')
            genero_usuario = st.session_state.get('genero_usuario', 'Masculino')
            
            krishna_prompt = construir_prompt_krishna(
                prompt, 
                versos_contexto, 
                bhagavad_gita,
                st.session_state.messages, 
                nombre_usuario,
                genero_usuario
            )
            
            # DEBUG CR√çTICO: Mostrar informaci√≥n del contexto sin repeticiones
            if "ÔøΩ NOTA: Has citado previamente" in krishna_prompt:
                inicio_nota = krishna_prompt.find("ÔøΩ NOTA: Has citado previamente")
                fin_nota = krishna_prompt.find("\n\n", inicio_nota)
                seccion_nota = krishna_prompt[inicio_nota:fin_nota]
                print("‚úÖ DEBUG: CONTEXTO SIN REPETICIONES:")
                print(f"---{seccion_nota}---")
            else:
                print("‚úÖ DEBUG: Primera respuesta - no hay versos previos")
            
            max_output_tokens = calcular_max_tokens_respuesta()
            
            generation_config = {
                'temperature': temperature,
                'max_output_tokens': max_output_tokens,
            }
            
            with st.spinner(""):
                response = api_rotator.generate_content_with_retry(
                    model_name='gemini-2.0-flash',
                    prompt=krishna_prompt,
                    generation_config=generation_config,
                    max_retries=2,
                    timeout_seconds=10
                )

            full_response = response.text
            message_placeholder.markdown(full_response)
            
            # A√±adir respuesta de Krishna al historial
            st.session_state.messages.append({"role": "assistant", "content": full_response})

        except Exception as e:
            error_str = str(e).lower()
            
            if "429" in error_str or "quota" in error_str or "rate limit" in error_str:
                error_message = "‚è≥ **L√≠mite de velocidad alcanzado**\n\nSe est√°n rotando las claves API autom√°ticamente. Por favor, intenta de nuevo en unos momentos."
                st.warning(error_message)
            elif "timeout" in error_str or "se agotaron todos los reintentos" in error_str:
                error_message = "‚è∞ **Tiempo de espera agotado**\n\nEl sistema prob√≥ m√∫ltiples claves pero todas tardaron demasiado. Por favor, intenta de nuevo."
                st.warning(error_message)
            elif "api key" in error_str:
                error_message = "üîë **Error de clave API**\n\nTodas las claves API est√°n temporalmente bloqueadas. Por favor, intenta m√°s tarde."
                st.error(error_message)
            else:
                error_message = f"‚ùå **Error inesperado**\n\n{str(e)}"
                st.error(error_message)
            
            st.session_state.messages.append({"role": "assistant", "content": error_message})
